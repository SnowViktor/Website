---
import type { CollectionKey } from "astro:content";

import BaseLayout from "./BaseLayout.astro";

import ArticlesInformation from "../components/collection_layout/ArticlesInformation.astro";
import ArticleItem from "../components/collection_layout/ArticleItem.astro";

import { sortedCollection } from "../utils/function_collection";

interface Props {
    title: string;
    description: string;
    collectionKey: CollectionKey | CollectionKey[];
    annotation?: boolean;
}
const { title, description, collectionKey, annotation = false } = Astro.props;

const articles = await sortedCollection(collectionKey);
---

<BaseLayout title={title} description={description}>
    <h1>{title}</h1>
    <slot />
    <ArticlesInformation
        annotation={annotation}
        articlesLength={articles.length}
    />
    <ul class="article-items">
        {
            articles.map((article) => (
                <li>
                    <ArticleItem article={article} />
                </li>
            ))
        }
    </ul>
</BaseLayout>

<style>
    ul {
        list-style-type: none;
        padding-inline-start: 0;
    }

    li {
        opacity: 0;
        transform: translateY(10%);
        transition: all 150ms cubic-bezier(0, 0, 0.2, 1);

        &.visible {
            opacity: 1;
            transform: translateY(0);
        }
    }
</style>

<script>
    document.addEventListener("astro:page-load", () => {
        const observerOptions = {
            threshold: 0.1,
        };

        const observer = new IntersectionObserver((entries) => {
            entries.forEach((entry) => {
                if (entry.isIntersecting) {
                    entry.target.classList.add("visible");
                    observer.unobserve(entry.target);
                }
            });
        }, observerOptions);

        document.body
            .querySelectorAll("ul.article-items li")
            .forEach((item) => {
                observer.observe(item);
            });
    });
</script>
