---
import BaseLayout from "@layouts/BaseLayout.astro";
import ArticlesInformation from "@components/collection_layout/ArticlesInformation.astro";
import ArticleItem from "@components/collection_layout/ArticleItem.astro";
import { sortCollection } from "@utils/collection";

interface Props {
  title: string;
  description: string;
}
const { title, description } = Astro.props;

const articles = await sortCollection("articles");
---

<BaseLayout title={title} description={description}>
  <h1>{title}</h1>
  <slot />
  <ArticlesInformation articlesLength={articles.length} />
  <ul class="article-items">
    {
      articles.map((article) => (
        <li>
          <ArticleItem article={article} />
        </li>
      ))
    }
  </ul>
</BaseLayout>

<style>
  @keyframes fadeInUp {
    from {
      opacity: 0.5;
    }
    to {
      opacity: 1;
    }
  }

  ul {
    list-style-type: none;
    padding-inline-start: 0;
  }

  li {
    opacity: 0.5;
    transition: opacity 150ms;
    will-change: opacity;

    &.visible {
      animation: fadeInUp 150ms linear both;
    }
  }

  /* li {
        animation: fadeInUp 300ms linear both;
        animation-range: entry 100% cover 10%;
        animation-timeline: view();
        will-change: opacity;
    } */
</style>

<script>
  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          entry.target.classList.add("visible");
        } else {
          entry.target.classList.remove("visible");
        }
      });
    },
    { rootMargin: "0px 0px 21px 0px", threshold: 0.1 }
  );
  document
    .querySelectorAll("ul.article-items li")
    .forEach((item) => observer.observe(item));
</script>
