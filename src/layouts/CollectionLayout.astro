---
import {
    type CollectionEntry,
    type CollectionKey,
    getCollection,
} from "astro:content";
import BaseLayout from "./BaseLayout.astro";
import ArticleItem from "../components/collection_layout/ArticleItem.astro";

interface Props {
    collection: CollectionKey | CollectionKey[];
    title: string;
    description: string;
    annotation: boolean;
}
const { collection, title, description, annotation } = Astro.props;

const collections: CollectionKey[] = Array.isArray(collection)
    ? collection
    : [collection];
let sortedCollection: CollectionEntry<CollectionKey>[] = [];
for (const collection of collections) {
    const currentCollection: CollectionEntry<CollectionKey>[] =
        await getCollection(collection);
    sortedCollection = sortedCollection.concat(currentCollection);
}
sortedCollection = sortedCollection.sort(
    (a, b) =>
        new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime(),
);
---

<BaseLayout title={title} description={description}>
    <h1>{title}</h1>
    <slot />
    <p id="information">
        {annotation && <span class="existing">註：「〇」表示無題</span>}
        <span>共 {sortedCollection.length} 篇</span>
    </p>
    <ul>
        {
            sortedCollection.map((article) => (
                <li>
                    <ArticleItem article={article} />
                </li>
            ))
        }
    </ul>
</BaseLayout>

<style>
    #information {
        color: var(--color-text-secondary);
        display: flex;
        font-size: 0.8em;
        font-weight: 500;
        justify-content: flex-end;
        padding: 0 calc(18px * 0.75); /* 18px、0.75em 分別是 ArticleItem 的 font-size、margin-inline。 */

        &:has(.existing) {
            justify-content: space-between;
        }
    }

    ul {
        list-style-type: none;
        padding-inline-start: 0;
    }
</style>
