---
import type { CollectionEntry } from "astro:content";
import BaseLayout from "@layouts/BaseLayout.astro";
import ArticleNavigation from "@components/ArticleNavigation.astro";
import { formatAttributeDate, formatContentDate } from "@utils/time";
import { CATEGORIES_LIST } from "src/consts";

type Props = { id: string } & CollectionEntry<"articles">["data"];
const {
  id,
  title,
  description,
  pubDate,
  updatedDate,
  categories,
  author,
  originalAuthor,
  heroImage,
} = Astro.props;
---

<BaseLayout
  title={`${title}．${formatContentDate(pubDate, false)}`}
  description={description}
  image={heroImage?.image.src}
>
  <article>
    <hgroup>
      <ul>
        {
          categories.map((category) => (
            <li>
              <a
                href={`/categories/${CATEGORIES_LIST.find((obj) => obj.name === category)!.id}`}
              >
                ＃{category}
              </a>
            </li>
          ))
        }
      </ul>
      <time datetime={formatAttributeDate(pubDate)}
        >{formatContentDate(pubDate)}</time
      >
      {
        updatedDate && (
          <span>
            更：
            <time datetime={formatAttributeDate(updatedDate)}>
              {formatContentDate(updatedDate)}
            </time>
          </span>
        )
      }
      {
        originalAuthor ?
          <div class="original-author">
            <h1>{title}</h1>
            <span>by {originalAuthor}</span>
          </div>
        : <h1>{title}</h1>
      }
      <span>作者：{author}</span>
    </hgroup>
    <hr />
    <div class="text">
      <slot />
    </div>
  </article>
  <aside><ArticleNavigation id={id} /></aside>
</BaseLayout>

<style>
  hgroup {
    ul,
    time,
    span {
      font-family: var(--font-serif);
      font-size: 0.8em;
      font-weight: 500;
      text-align: center;
    }

    ul {
      display: flex;
      justify-content: center;
      gap: 1ch;
      padding-left: 0;
      list-style-type: none;
    }

    a {
      transition: all var(--transition-duration)
        var(--transition-timing-function);

      &:focus-visible,
      &:hover {
        color: var(--color-primary);
      }
    }

    time {
      display: block;
      word-spacing: -0.25ch;
    }

    span {
      display: block;
    }

    .original-author {
      position: relative;

      span {
        position: absolute;
        bottom: 0;
        left: 17ch;
      }
    }
  }

  .text {
    margin-block: 1em;
    font-family: var(--font-cursive);
    letter-spacing: 0;
    word-spacing: -0.2ch;
    text-wrap: pretty;

    details {
      color: var(--color-text-muted);
    }

    p:has(+ blockquote) {
      margin-bottom: 0;

      + blockquote {
        margin-top: 0;

        p {
          margin-top: inherit;
        }
      }
    }
  }
</style>
