---
import type { CollectionEntry } from "astro:content";
import BaseLayout from "@layouts/BaseLayout.astro";
import ArticleNavigation from "@components/ArticleNavigation.astro";
import LayoutsTime from "@components/LayoutsTime.astro";
import { formatContentDate } from "@utils/time";
import { CATEGORIES_LIST } from "src/consts";

type Props = { id: string } & CollectionEntry<"articles">["data"];
const {
  id,
  title,
  description,
  pubDate,
  updatedDate,
  categories,
  author,
  originalAuthor,
  heroImage,
} = Astro.props;
---

<BaseLayout
  title={`${title}．${formatContentDate(pubDate, false)}`}
  description={description}
  image={heroImage?.image.src}
>
  <article>
    <section class="metadata">
      <hgroup class="meta-title">
        <h1>{title}</h1>
        {originalAuthor && <span>└ {originalAuthor}</span>}
      </hgroup>
      <div class="meta-info">
        <span>{author}</span>
        <span>～</span>
        <span>
          <LayoutsTime date={pubDate} />
          {
            updatedDate && (
              <span>
                （更：<LayoutsTime date={updatedDate} />）
              </span>
            )
          }
        </span>
      </div>
      <ul class="meta-categories">
        {
          categories.map((category) => (
            <li>
              <a
                href={`/categories/${CATEGORIES_LIST.find((obj) => obj.name === category)!.id}`}
              >
                ＃{category}
              </a>
            </li>
          ))
        }
      </ul>
    </section>
    <hr />
    <section class="content">
      <slot />
    </section>
  </article>
  <aside><ArticleNavigation id={id} /></aside>
</BaseLayout>

<style>
  .metadata {
    span,
    a {
      font-family: var(--font-serif);
      font-size: 0.9em;
      font-weight: 400;
    }

    time {
      word-spacing: -0.25ch;
    }

    a {
      transition: all var(--transition-duration)
        var(--transition-timing-function);

      &:focus-visible,
      &:hover {
        color: var(--color-primary);
      }
    }
  }

  .meta-title {
    position: relative;
    display: flex;
    justify-content: center;

    h1 {
      anchor-name: --title;

      &:is(:last-child) {
        margin-bottom: 0;
      }
    }

    span {
      position: absolute;
      position-anchor: --title;
      bottom: calc(anchor(bottom) - 0.4em);
      left: anchor(left);
    }
  }

  .meta-info {
    display: flex;
    gap: 1ch;
    margin-block: 1em;

    > span:not(:nth-child(even)) {
      flex: 1;
      text-align: right;

      &:last-child {
        text-align: left;
      }
    }
  }

  .meta-categories {
    display: flex;
    justify-content: center;
    gap: 1ch;
    padding-left: 0;
    list-style: none;
  }

  .content {
    font-family: var(--font-cursive);
    letter-spacing: 0;
    word-spacing: -0.175ch;
    text-wrap: pretty;

    details {
      color: var(--color-text-muted);
    }

    p:has(+ blockquote) {
      margin-bottom: 0;

      + blockquote {
        margin-top: 0;

        p {
          margin-top: inherit;
        }
      }
    }
  }

  aside {
    margin-top: auto;
  }
</style>
