---
import BaseLayout from "../../layouts/BaseLayout.astro";

import decrease from "../../assets/buttons/decrease.svg";
import increase from "../../assets/buttons/increase.svg";
import refresh from "../../assets/buttons/refresh.svg";
import copy from "../../assets/buttons/copy.svg";
---

<BaseLayout title="密碼產生" description="【隨機產生安全的 ASCII 密碼】：減少｜輸入｜增加｜刷新｜複製｜密碼">
    <h1>密碼產生</h1>
    <div id="password-function">
        <div id="input-group">
            <button id="input-decrease" aria-label="減少">
                <img src={decrease.src} alt="減少" />
            </button>
            <input id="input-number" aria-label="輸入" type="number" min="0" max="10000" placeholder="0" />
            <button id="input-increase" aria-label="增加">
                <img src={increase.src} alt="增加" />
            </button>
        </div>
        <button id="output-refresh" aria-label="刷新">
            <img src={refresh.src} alt="刷新" />
        </button>
        <div id="copy-group">
            <button id="output-copy" aria-label="複製">
                <img src={copy.src} alt="複製" />
            </button>
            <p id="copy-alert">已複製</p>
        </div>
    </div>
    <textarea id="password-output" aria-label="密碼" rows="1" readonly></textarea>
</BaseLayout>

<style>
    #password-function {
        align-items: center;
        display: flex;
        justify-content: space-evenly;
        margin-inline: 25%;
        
        button {
            background-color: unset;
            border-radius: 100%;
            border-style: none;
            cursor: pointer;
            font-size: 0;
            padding: 0;

            &:focus-visible,
            &:hover {
                img {
                    transform: scale(1.3);
                }
            }

            img {
                background-color: #f2d1a8;
                border-radius: 100%;
                pointer-events: none;
                transition: all 100ms ease-in-out;
                user-select: none;
            }
        }

        #input-group {
            display: flex;
            justify-content: space-around;
            width: 200px;

            #input-number {
                background-color: #ffffff;
                border: 1px solid #c1d8c3;
                border-radius: 15px;
                font-family: "Trebuchet MS", "Lucida Sans Unicode", "Lucida Grande", "Lucida Sans", sans-serif;
                font-size: 1em;
                height: 38.44px;
                outline: none;
                padding: 0;
                text-align: center;
                width: 40%;

                &:focus-visible,
                &:hover {
                    border: 2px solid #c1d8c3;
                }

                &::-webkit-outer-spin-button,
                &::-webkit-inner-spin-button {
                    -webkit-appearance: none;
                }

                &[type=number] {
                    -moz-appearance: textfield;
                }
            }
        }

        #copy-group {
            position: relative;

            #copy-alert {
                background-color: #6a9c89;
                border-radius: 10px;
                font-size: 0.8em;
                left: 50%;
                opacity: 0;
                padding: 2px 5px;
                position: absolute;
                text-align: center;
                text-wrap: nowrap;
                top: -100%;
                transition: opacity 0.25s;

                &.visible {
                    opacity: 1;
                }
            }
        }
    }

    @media (max-width: 500px) {
        #password-function {
            margin: 0;
        }
    }

    #password-output {
        background-color: #ffffff;
        border: 1px solid #c1d8c3;
        border-radius: 15px;
        box-shadow: 0 0 2px 1px #c1d8c380;
        font-size: 1em;
        margin-top: 4%;
        overflow: scroll;
        padding: 6px 12px 3px;
        resize: none;
        white-space: nowrap;
        width: calc(100% - 24px);

        &:focus-visible,
        &:hover {
            box-shadow: 0 0 4px 2px #c1d8c380;
            outline: none;
        }
    }
</style>

<script is:inline data-astro-rerun>
    document.addEventListener("astro:page-load", () => {
        const inputDecrease = document.getElementById("input-decrease");
        const inputNumber = document.getElementById("input-number");
        const inputIncrease = document.getElementById("input-increase");
        const outputRefresh = document.getElementById("output-refresh");
        const outputCopy = document.getElementById("output-copy");
        const copyAlert = document.getElementById("copy-alert");
        const passwordOutput = document.getElementById("password-output");
    
        let number = 0;
        let timeout;
        let interval;
        let alertTimeout;
        const charSet = " !\"'#$%&()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
    
        inputNumber.addEventListener("input", () => {
            let value = parseInt(inputNumber.value, 10) || 0;
            value = Math.max(0, Math.min(100000, value));
            inputNumber.value = value;
            number = value;
            generatePassword();
        });
    
        function handleInput(func) {
            return (event) => {
                if (event.type === "mousedown" || event.type === "touchstart") {
                    // isHolding = true;
                    timeout = setTimeout(() => {
                        interval = setInterval(func, 50);
                    }, 200);
                } else if (event.type === "mouseup" || event.type === "touchend" || event.type === "mouseleave") {
                    // isHolding = false;
                    clearInterval(interval);
                    clearTimeout(timeout);
                } else if (event.type === "click" || (event.type === "keydown" && event.target.matches(":focus-visible"))) {
                    func();
                }
            };
        }
    
        inputDecrease.addEventListener("click", handleInput(decrease));
        inputDecrease.addEventListener("mousedown", handleInput(decrease));
        inputDecrease.addEventListener("mouseup", handleInput(decrease));
        inputDecrease.addEventListener("mouseleave", handleInput(decrease));
        inputDecrease.addEventListener("touchstart", handleInput(decrease));
        inputDecrease.addEventListener("touchend", handleInput(decrease));
    
        inputIncrease.addEventListener("click", handleInput(increase));
        inputIncrease.addEventListener("mousedown", handleInput(increase));
        inputIncrease.addEventListener("mouseup", handleInput(increase));
        inputIncrease.addEventListener("mouseleave", handleInput(increase));
        inputIncrease.addEventListener("touchstart", handleInput(increase));
        inputIncrease.addEventListener("touchend", handleInput(increase));
    
    
        outputRefresh.addEventListener("click", generatePassword);
        outputRefresh.addEventListener("keydown", (event) => {if (event.target.matches(":focus-visible")) generatePassword()});
    
        outputCopy.addEventListener("click", copy);
        outputCopy.addEventListener("keydown", (event) => {if (event.target.matches(":focus-visible")) copy()});
    
        function decrease() {
            number = Math.max(0, number - 1);
            inputNumber.value = number;
            generatePassword();
        }
    
        function increase() {
            number = Math.min(100000, number + 1);
            inputNumber.value = number;
            generatePassword();
        }
    
        function copy() {
            navigator.clipboard.writeText(passwordOutput.value);
            copyAlert.classList.add("visible");
            clearTimeout(alertTimeout);
            alertTimeout = setTimeout(() => {
                copyAlert.classList.remove("visible");
            }, 1500);
        }
    
        function generatePassword() {
            passwordOutput.value = classifyLength(number);
        }
    
        function classifyLength(length) {
            if (length < 95) {
                return generateRandom(length);
            } else {
                let integer = "";
                const numFullChunks = Math.trunc(length / 95);
                for (let i = 0; i < numFullChunks; i++) {
                    integer += generateRandom(95);
                }
                return integer + generateRandom(length % 95);
            }
        }
    
        function generateRandom(sliceEnd) {
            // Fisher-Yates shuffle
            let shuffled = charSet.split("");
            for (let i = shuffled.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
            }
            return shuffled.slice(0, sliceEnd).join("");
        }
    });
</script>