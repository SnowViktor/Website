---
import ImageFunction from "../../components/ImageFunction.astro";
import PageLayout from "../../layouts/PageLayout.astro";
---

<PageLayout title="密碼產生" description="【隨機產生安全的 ASCII 密碼】：減少 | 輸入 | 增加 | 刷新 | 複製 | 密碼">
    <div id="function">
        <div id="number">
            <ImageFunction src="/src/assets/remove.svg" alt="減少" id="number-remove" tabindex="0" />
            <input id="number-input" aria-label="輸入" type="number" min="0" max="10000" placeholder="0" />
            <ImageFunction src="/src/assets/add.svg" alt="增加" id="number-add" tabindex="0" />
        </div>
        <ImageFunction src="/src/assets/refresh.svg" alt="刷新" id="password-refresh" tabindex="0" />
        <div id="copy">
            <ImageFunction src="/src/assets/copy.svg" alt="複製" id="password-copy" tabindex="0" />
            <p id="copy-alert">已複製</p>
        </div>
    </div>
    <textarea id="password-output" aria-label="密碼" rows="1" readonly></textarea>
</PageLayout>

<style>
    #function {
        align-items: center;
        display: flex;
        justify-content: space-evenly;
        margin: 0 25% 20px 25%;

        #number {
            align-items: center;
            display: flex;
            justify-content: space-between;
            width: 160px;

            #number-input {
                background-color: #fff;
                border: 1px solid #c1d8c3;
                border-radius: 15px;
                font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', serif;
                font-size: 20px;
                height: 38.44px;
                outline: none;
                padding: 0;
                text-align: center;
                width: 68px;

                &:focus,
                &:hover {
                    border: 2px solid #c1d8c3;
                    margin: 0.431px;
                }

                &::-webkit-outer-spin-button,
                &::-webkit-inner-spin-button {
                    -webkit-appearance: none;
                }

                &[type=number] {
                    -moz-appearance: textfield;
                }
            }
        }

        img {
            background-color: #f2d1a8;
            border-radius: 100%;
            cursor: pointer;
            transition: all 100ms ease-in-out;

            &:active,
            &:focus,
            &:hover {
                transform: scale(1.3);
            }
        }

        #copy {
            display: inline-block;
            position: relative;

            #copy-alert {
                background-color: #6a9c89;
                border-radius: 15px;
                font-size: 16px;
                left: 90%;
                opacity: 0;
                padding: 5px;
                position: absolute;
                text-align: center;
                text-wrap: nowrap;
                top: -115%;
                transition: opacity 0.25s;

                &.visible {
                    opacity: 1;
                }
            }
        }
    }

    @media screen and (max-width: 600px) {
        #function {
            margin: 0 10% 20px 10%;
        }
    }

    #password-output {
        background-color: #fff;
        border: 1px solid #c1d8c3;
        border-radius: 15px;
        box-shadow: 0 0 2px 1px #c1d8c380;
        font-family: sans-serif;
        font-size: 20px;
        overflow: scroll;
        padding: 12px 12px 0 12px;
        resize: none;
        white-space: nowrap;
        width: calc(100% - 24px);

        &:focus,
        &:hover {
            box-shadow: 0 0 4px 2px #c1d8c380;
            outline: none;
        }
    }
</style>

<script>
    const numberRemove = document.getElementById('number-remove') as HTMLImageElement;
    const numberInput = document.getElementById('number-input') as HTMLInputElement;
    const numberAdd = document.getElementById('number-add') as HTMLImageElement;
    const passwordRefresh = document.getElementById('password-refresh') as HTMLImageElement;
    const passwordCopy = document.getElementById('password-copy') as HTMLImageElement;
    const copyAlert = document.getElementById('copy-alert');
    const passwordOutput = document.getElementById('password-output') as HTMLTextAreaElement;
    let number = 0, timeout: NodeJS.Timeout, interval: NodeJS.Timeout, alert: NodeJS.Timeout;

    numberInput.addEventListener('input', () => {
        if (Number(numberInput.value) < 0) {
            numberInput.value = '0';
        } else if (Number(numberInput.value) > 10000) {
            numberInput.value = '10000';
        }
        number = Number(numberInput.value);
        generatePassword();
    });

    function removeNumber() {
        if (Number(numberInput.value) <= 0) {
            number = 0; numberInput.value = '0';
        } else {
            number -= 1; numberInput.value = String(Number(numberInput.value) - 1);
        }
        generatePassword();
    }

    numberRemove.onclick = removeNumber;
    numberRemove.onfocus = () => {numberRemove.onkeydown = removeNumber;};
    numberRemove.onmouseenter = () => {
        numberRemove.onmousedown = () => {timeout = setTimeout(() => {interval = setInterval(removeNumber, 75);}, 200);};
        numberRemove.onmouseup = () => {clearInterval(interval); clearTimeout(timeout);};
    };
    numberRemove.onmouseleave = () => {clearInterval(interval); clearTimeout(timeout);};

    function addNumber() {
        if (Number(numberInput.value) < 10000) {
            number += 1; numberInput.value = String(Number(numberInput.value) + 1);
        }
        generatePassword();
    }

    numberAdd.onclick = addNumber;
    numberAdd.onfocus = () => {numberAdd.onkeydown = addNumber;};
    numberAdd.onmouseenter = () => {
        numberAdd.onmousedown = () => {timeout = setTimeout(() => {interval = setInterval(addNumber, 75);}, 200);};
        numberAdd.onmouseup = () => {clearInterval(interval); clearTimeout(timeout);};
    };
    numberAdd.onmouseleave = () => {clearInterval(interval); clearTimeout(timeout);};

    passwordRefresh.onclick = generatePassword;
    passwordRefresh.onfocus = () => {passwordRefresh.onkeydown = generatePassword;};

    function copyPassword() {
        navigator.clipboard.writeText(passwordOutput.value);
        copyAlert!.classList.add('visible');
        alert = setTimeout(() => {clearTimeout(alert); copyAlert!.classList.remove('visible');}, 1500);
    }

    passwordCopy.onclick = copyPassword;
    passwordCopy.onfocus = () => {passwordCopy.onkeydown = copyPassword;};

    function generatePassword() {passwordOutput.value = classifyLength(number);}

    function classifyLength(length: number) {
        if (length < 95) {
            return generateRandom(length);
        } else {
            let integer = '';
            for (let i = 0; i < Math.trunc(length / 95); i++) {integer += generateRandom(95);} 
            return integer + generateRandom(length % 95);
        }
    }
    
    function generateRandom(sliceEnd: number) {
        return Array
          .from(' !\'"#$%&()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~')
          .sort(() => 0.5 - Math.random())
          .slice(0, sliceEnd)
          .join('');
    }
</script>