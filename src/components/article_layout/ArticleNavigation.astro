---
import { Image } from "astro:assets";
import type { CollectionEntry, CollectionKey } from "astro:content";
import { collectionKey } from "../../content.config";

import arrowLeft from "../../assets/icons/arrow_left_alt.svg";
import arrowRight from "../../assets/icons/arrow_right_alt.svg";

import { formatPubDate } from "../../utils/format_pub-date";
import {
    collectionKeyToPath,
    sortedCollection,
} from "../../utils/function_collection";

interface Props {
    id: string;
}
const { id } = Astro.props;

const articles = await sortedCollection(collectionKey);
const currentIndex = articles.findIndex((article) => article.id === id);
const prevArticle = articles[currentIndex + 1];
const nextArticle = articles[currentIndex - 1];

type NavigationItem = {
    article: CollectionEntry<CollectionKey>;
    direction: "prev" | "next";
    label: string;
    icon: ImageMetadata;
};

const navigationItems = [
    prevArticle && {
        article: prevArticle,
        direction: "prev",
        label: "Go to the previous page.",
        icon: arrowLeft,
    },
    nextArticle && {
        article: nextArticle,
        direction: "next",
        label: "Go to the next page.",
        icon: arrowRight,
    },
].filter(Boolean) as NavigationItem[];
---

<nav>
    {
        navigationItems.map(({ article, direction, label, icon }) => (
            <a
                class={direction}
                href={`/articles/${collectionKeyToPath(article.collection)}/${article.id}`}
                aria-label={label}
            >
                <button>
                    <Image
                        src={icon}
                        height="26"
                        alt={`Arrow ${direction === "prev" ? "Left" : "Right"}`}
                    />
                    <p>
                        {article.data.title}
                        <time datetime={article.data.pubDate.toISOString()}>
                            {formatPubDate(article.data.pubDate, true)}
                        </time>
                    </p>
                </button>
            </a>
        ))
    }
</nav>

<style>
    nav {
        align-items: flex-end;
        display: flex;
        justify-content: space-between;
        margin-top: auto;
        padding-block: var(--body-padding-inline);

        &:has(.prev:only-child) {
            justify-content: flex-start;
        }

        &:has(.next:only-child) {
            justify-content: flex-end;
        }
    }

    a {
        &.prev button {
            flex-direction: row;

            p {
                align-items: flex-start;
            }
        }

        &.next button {
            flex-direction: row-reverse;

            p {
                align-items: flex-end;
            }
        }
    }

    button {
        align-items: center;
        background-color: transparent;
        border: 1px solid var(--color-utils-background);
        border-radius: 0.9em;
        display: flex;
        padding: 0.5em;
        transition: all 150ms cubic-bezier(0.4, 0, 0.2, 1);
        user-select: none;

        &:focus-visible,
        &:hover {
            background-color: var(--color-utils-background);
            border-radius: 1.1em;
        }

        &:active {
            transform: scale(0.95);
        }
    }

    img {
        filter: brightness(0.75);
    }

    p {
        color: var(--color-text-tertiary);
        display: flex;
        flex-direction: column;
        margin: 0;
    }

    time {
        word-spacing: -0.15em;
    }
</style>
