---
import type { CollectionEntry } from "astro:content";
import { getAdjacentArticles } from "@utils/collection";
import { formatAttributeDate, formatContentDate } from "@utils/time";
import ArrowLeft from "@lucide/astro/icons/arrow-left";
import ArrowRight from "@lucide/astro/icons/arrow-right";

interface Props {
  id: string;
}
const { id } = Astro.props;

const { prev: prevArticle, next: nextArticle } = await getAdjacentArticles(id);
const navigationItems = [
  prevArticle && {
    article: prevArticle,
    direction: "prev",
    label: "Go to the previous page",
  },
  nextArticle && {
    article: nextArticle,
    direction: "next",
    label: "Go to the next page",
  },
].filter(Boolean) as {
  article: CollectionEntry<"articles">;
  direction: "prev" | "next";
  label: string;
}[];
---

<nav>
  {
    navigationItems.map(({ article, direction, label }) => {
      const frontmatter = article.data;
      return (
        <a
          class={direction}
          href={`/articles/${article.id}`}
          aria-label={label}
        >
          <div tabindex="-1">
            {direction === "prev" ?
              <ArrowLeft size={20} />
            : <ArrowRight size={20} />}
            <p>
              {frontmatter.title}
              <time datetime={formatAttributeDate(frontmatter.pubDate)}>
                {formatContentDate(frontmatter.pubDate)}
              </time>
            </p>
          </div>
        </a>
      );
    })
  }
</nav>

<style>
  nav {
    margin-top: auto;
    display: flex;
    align-items: flex-end;
    justify-content: space-between;

    &:has(.prev:only-child) {
      justify-content: flex-start;
    }

    &:has(.next:only-child) {
      justify-content: flex-end;
    }
  }

  a {
    &.prev div {
      flex-direction: row;

      p {
        align-items: flex-start;
      }
    }

    &.next div {
      flex-direction: row-reverse;

      p {
        align-items: flex-end;
      }
    }
  }

  div {
    padding: 0.4em 0.4em 0.3em;
    display: flex;
    align-items: center;
    border: 1px solid var(--color-border-muted);
    border-radius: var(--border-radius-small);
    background-color: transparent;
    transition: all var(--transition-duration) var(--transition-timing-function);
    user-select: none;

    &:focus-visible,
    &:hover {
      background-color: var(--color-bg-light);
    }

    &:active {
      transform: scale(0.95);
    }
  }

  svg {
    filter: brightness(0.75);
  }

  p {
    margin: 0;
    display: flex;
    flex-direction: column;
    color: var(--color-text-muted);
    font-size: 0.8em;
    letter-spacing: 0;
    line-height: 1.2;
  }

  time {
    word-spacing: -0.15em;
  }
</style>
