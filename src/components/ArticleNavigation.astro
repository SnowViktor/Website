---
import type { CollectionEntry, CollectionKey } from "astro:content";
import { formatContentDate } from "@utils/time";
import { sortCollection } from "@utils/collection";
import ArrowLeft from "@lucide/astro/icons/arrow-left";
import ArrowRight from "@lucide/astro/icons/arrow-right";

interface Props {
  title: string;
}
const { title } = Astro.props;

const articles = await sortCollection("articles");
const currentIndex = articles.findIndex(
  (article) => article.data.title === title
);
const prevArticle = articles[currentIndex + 1];
const nextArticle = articles[currentIndex - 1];

type NavigationItem = {
  article: CollectionEntry<CollectionKey>;
  direction: "prev" | "next";
  label: string;
};

const navigationItems = [
  prevArticle && {
    article: prevArticle,
    direction: "prev",
    label: "Go to the previous page.",
  },
  nextArticle && {
    article: nextArticle,
    direction: "next",
    label: "Go to the next page.",
  },
].filter(Boolean) as NavigationItem[];
---

<nav>
  {
    navigationItems.map(({ article, direction, label }) => (
      <a class={direction} href={`/articles/${article.id}`} aria-label={label}>
        <div tabindex="-1">
          {direction === "prev" ? (
            <ArrowLeft size={20} />
          ) : (
            <ArrowRight size={20} />
          )}
          <p>
            {article.data.title}
            <time datetime={article.data.pubDate.toISOString()}>
              {formatContentDate(article.data.pubDate, true)}
            </time>
          </p>
        </div>
      </a>
    ))
  }
</nav>

<style>
  nav {
    margin-top: auto;
    padding-block: var(--body-padding-inline);
    display: flex;
    align-items: flex-end;
    justify-content: space-between;

    &:has(.prev:only-child) {
      justify-content: flex-start;
    }

    &:has(.next:only-child) {
      justify-content: flex-end;
    }
  }

  a {
    &.prev div {
      flex-direction: row;

      p {
        align-items: flex-start;
      }
    }

    &.next div {
      flex-direction: row-reverse;

      p {
        align-items: flex-end;
      }
    }
  }

  div {
    padding: 0.4em 0.4em 0.3em;
    display: flex;
    align-items: center;
    border: 1px solid var(--color-utils-background);
    border-radius: 0.65em;
    background-color: transparent;
    transition: all 150ms cubic-bezier(0.4, 0, 0.2, 1);
    user-select: none;

    &:focus-visible,
    &:hover {
      border-radius: 0.85em;
      background-color: var(--color-utils-background);
    }

    &:active {
      transform: scale(0.95);
    }
  }

  svg {
    filter: brightness(0.75);
  }

  p {
    margin: 0;
    display: flex;
    flex-direction: column;
    color: var(--color-text-tertiary);
    font-size: 0.8em;
    letter-spacing: 0;
    line-height: 1.2;
  }

  time {
    word-spacing: -0.15em;
  }
</style>
