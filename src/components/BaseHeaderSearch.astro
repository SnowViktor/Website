---
import type { HTMLAttributes, HTMLTag } from "astro/types";

type Props = HTMLAttributes<HTMLTag>;
const { ...props } = Astro.props;
---

<search {...props}>
  <input
    id="search-input"
    type="search"
    size="10"
    autocomplete="off"
    placeholder="search"
  />
  <output id="search-output" for="search-input"></output>
</search>

<style>
  search {
    font-family: var(--font-sans);
  }

  #search-input {
  }

  #search-output {
    position: fixed;
    z-index: 1;
    top: 45px;
    left: 0;

    &::before {
      content: "";
      position: absolute;
      z-index: -1;
      inset: 0;
      width: 100%;
      height: 100%;
      background-color: oklch(
        from var(--color-bg) l c h / var(--opacity-strongest)
      );
      backdrop-filter: var(--blur-small);
    }

    ul {
      padding-left: 0;
      list-style: none;
    }

    a {
      display: flex;
      gap: 2ch;
    }

    .title {
      color: var(--color-primary);
      font-weight: 700;
    }

    .excerpt {
      font-size: 0.9em;
      font-weight: 400;

      mark {
        font-weight: 500;
      }
    }
  }
</style>

<script async is:inline>
  const searchInput = document.getElementById("search-input");
  const searchOutput = document.getElementById("search-output");
  let pagefind = null;

  searchInput.addEventListener("focus", async () => {
    if (!pagefind) {
      pagefind = await import("/pagefind/pagefind.js");
      await pagefind.options({
        excerptLength: 25,
      });
      pagefind.init();
    }
  });

  searchInput.addEventListener("input", async (e) => {
    const value = e.target.value;
    // 將 CJK 連續字串分字並加引號，英文等 ASCII 自動與前面非 ASCII 空格分隔
    const searchTerm = value
      .replace(
        /([\u3040-\u30ff\u3400-\u4dbf\u4e00-\u9fff\uf900-\ufaff]+)/g,
        (match) => `"${match.split("").join(" ")}"`,
      )
      .replace(/" ([A-Za-z0-9])/g, `" $1`) // 去除 CJK 分字後引號與英文間多餘空格
      .replace(/(".*?")([A-Za-z0-9])/g, "$1 $2"); // 若 CJK 與 ASCII 之間沒有空格，補上一個空格
    const search = await pagefind.debouncedSearch(searchTerm, {}, 300);

    if (search && search.results.length > 0) {
      const results = await Promise.all(search.results.map((r) => r.data()));
      console.log(results);

      const ul = document.createElement("ul");
      results.forEach((data) => {
        const li = document.createElement("li");
        const a = document.createElement("a");
        a.href = data.url.replace(/\/$/, "");

        const title = document.createElement("span");
        title.classList.add("title");
        title.textContent = data.meta.title;

        const excerpt = document.createElement("span");
        excerpt.classList.add("excerpt");
        excerpt.innerHTML = data.excerpt;

        a.appendChild(title);
        a.appendChild(excerpt);
        li.appendChild(a);
        ul.appendChild(li);
      });
      searchOutput.innerHTML = "";
      searchOutput.appendChild(ul);
    } else {
      searchOutput.innerHTML = "";
    }
  });
</script>
